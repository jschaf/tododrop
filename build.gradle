import groovy.xml.MarkupBuilder
import org.jooq.util.GenerationTool
import org.yaml.snakeyaml.Yaml
import javax.xml.bind.JAXB
import io.dropwizard.configuration.FileConfigurationSourceProvider
import io.dropwizard.configuration.EnvironmentVariableSubstitutor
import io.dropwizard.configuration.SubstitutingSourceProvider

buildscript {
    repositories {
        jcenter()

    }
    dependencies {
        classpath 'ch.raffael.pegdown-doclet:pegdown-doclet:1.2'
        classpath 'com.bmuschko:gradle-docker-plugin:2.6.5'
        classpath 'org.flywaydb:flyway-gradle-plugin:3.2.1'
        classpath 'org.jooq:jooq-codegen:3.7.2'
        classpath 'org.postgresql:postgresql:9.4.1207'
        classpath 'org.yaml:snakeyaml:1.16'
    }
}

plugins {
    id 'application'
    id 'java'
    id 'groovy'

    id 'com.bmuschko.docker-remote-api' version '2.6.5'
    id 'com.github.johnrengelman.shadow' version '1.2.3'
    id 'org.unbroken-dome.test-sets' version '1.2.0'
    id 'org.flywaydb.flyway' version '3.2.1'
}

apply plugin: 'ch.raffael.pegdown-doclet'

group 'tododrop'
version '0.1'

// YAML Configuration
// ==================
//
// Load config variables from YAML which is the canonical source of truth.
// We desperately want to avoid defining configuration variables in two places.
String CONFIG_FILE_PATH = file('tododrop.yml')

// Replace variables like ${JDBC_DATABASE_URL} with the corresponding
// environmental variable by reusing Dropwizard's configuration modules.
def is_strict_environmental = false
def substitutingFileReader = new SubstitutingSourceProvider(
        new FileConfigurationSourceProvider(),
        new EnvironmentVariableSubstitutor(is_strict_environmental))
def configWithEnvVars = substitutingFileReader.open(CONFIG_FILE_PATH)

Yaml yaml = new Yaml();
def config = yaml.load(configWithEnvVars)
def dbConfig = config.database;

project.ext {
    dropwizardVersion = '0.9.2'
}

project.sourceCompatibility = 1.8
project.targetCompatibility = 1.8

mainClassName = 'tododrop.TodoApp'

allprojects {
    repositories {
        jcenter()
        maven {
            url = 'https://oss.sonatype.org/content/repositories/snapshots'
        }
    }
}

configurations {
    markdownDoclet
    checker
}

// Configure integrationTest as a sourceSet and set it up for testing
testSets {
    integrationTest
}

dependencies {
    checker 'org.checkerframework:checker:1.9.11'
    checker 'org.checkerframework:jdk8:1.9.11'

    compile (
            'com.bendb.dropwizard:dropwizard-jooq:0.9.1-1-SNAPSHOT',
            'com.google.guava:guava:19.0',
            "io.dropwizard:dropwizard-configuration:$dropwizardVersion",
            "io.dropwizard:dropwizard-core:$dropwizardVersion",
            "io.dropwizard:dropwizard-db:$dropwizardVersion",
            "io.dropwizard:dropwizard-testing:$dropwizardVersion",
            'io.dropwizard.modules:dropwizard-flyway:0.9.0-1',
            'javax.persistence:persistence-api:1.0.2',
            'javax.validation:validation-api:1.1.0.Final',
            "org.jooq:jooq:3.7.2",
            'org.slf4j:slf4j-api:1.7.14',
            'ru.vyarus:dropwizard-guicey:3.2.0'
    )
    compile configurations.checker.dependencies

    runtime 'org.postgresql:postgresql:9.4.1207'

    testCompile (
            'junit:junit:4.12',
            "io.dropwizard:dropwizard-testing:$dropwizardVersion",
            'org.codehaus.groovy:groovy-all:2.4.5',
            'org.spockframework:spock-core:1.0-groovy-2.4',
            "org.objenesis:objenesis:2.1",   // allows mocking of classes without default constructor (together with CGLIB)
    )

    testRuntime (
            // FIXME: These should go in integrationTestRuntime but that doesn't work.
            "cglib:cglib-nodep:3.1",          // allows mocking of classes (in addition to interfaces)
            "org.objenesis:objenesis:2.1"    // allows mocking of classes without default constructor (together with CGLIB)
    )

    integrationTestCompile (
    )
}

// Database Migration - Flyway
// ===========================
//
// We include flyway migration capability in both build.gradle and in
// TodoApp.java because if we distribute only the JAR, migrations should
// still work.
flyway {
    url = dbConfig.url
}

// ## Flyway - don't depend on testClasses to prevent circular dependency
//
// Flyway needs to support Java migrations, so it depends on testClasses.
// That results in a circular dependency for jOOQ because we need database migrations
// to run before the jOOQ code generator to let jOOQ generate the updated schema.
// The gradle task compileJava relies on jOOQ generate files.
// See https://github.com/flyway/flyway/issues/775 for details.
project.afterEvaluate {
    project.tasks.each {
        if (it.name.startsWith("flyway")) {
            it.dependsOn -= testClasses
        }
    }
    // The migration scripts are located in src/main/resources/db/migration.
    // We have to add them to the classpath so flyway can find them.
    flywayMigrate.dependsOn = [processResources]
}


// Checkstyle
// ==========
//
// This complains about a missing library that's in the annotated JDK but not the normal one.
// The code below should work but of course it fucking doesn't.

//allprojects {
//    tasks.withType(JavaCompile).all { JavaCompile compile ->
//        compile.options.debug = true
//        compile.options.compilerArgs = [
//                "-Xbootclasspath/p:${configurations.checker.asPath}",
//                '-processor', 'org.checkerframework.checker.nullness.NullnessChecker',
//                '-implicit:class',
//                '-AprintErrorStack'
//        ]
//    }
//}


// jOOQ Schema Generation - generate fluent API based on database schema
// =====================================================================
//
// Example taken from:
// https://github.com/jOOQ/jOOQ/tree/master/jOOQ-examples/jOOQ-codegen-gradle
task generateJooqCode(type: Task) {
    description  'Generate Java API for the database.'
    doLast {
        def writer = new StringWriter()
        def xml = new MarkupBuilder(writer)
        xml.configuration('xmlns': 'http://www.jooq.org/xsd/jooq-codegen-3.7.0.xsd') {
            jdbc() {
                driver(dbConfig.driverClass)
                // The url includes the user and password.
                url(dbConfig.url)
            }
            generator() {
                database() {
                    inputSchema(config.schema)
                }

                // Watch out for this caveat when using MarkupBuilder with "reserved names"
                // - https://github.com/jOOQ/jOOQ/issues/4797
                // - http://stackoverflow.com/a/11389034/521799
                // - https://groups.google.com/forum/#!topic/jooq-user/wi4S9rRxk4A
                generate([:]) {
                    pojos true
                    immutablePojos false
                    daos false
                    fluentSetters true
                    validationAnnotations false
                    jpaAnnotations true
                    globalObjectReferences true
                }
                target() {
                    packageName('tododrop.models')
                    directory("src/generated/java")
                }
            }
        }

        // Run the code generator
        GenerationTool.generate(
                JAXB.unmarshal(new StringReader(writer.toString()),
                        org.jooq.util.jaxb.Configuration.class)
        )
    }
}

// Include generated jOOQ code as a source.
sourceSets {
    main.java.srcDir 'src/generated/java'
}

compileJava.dependsOn generateJooqCode

javadoc.options {
    docletpath = configurations.markdownDoclet.files.asType(List)
    doclet = "ch.raffael.doclets.pegdown.PegdownDoclet"
    addStringOption("parse-timeout", "10")
}


import com.bmuschko.gradle.docker.tasks.image.*
import com.bmuschko.gradle.docker.tasks.container.*

docker {
    // Use `docker-machine ls` to see the url of available machines.
    // Replace tcp:// with https://
    url = 'https://192.168.99.100:2376'
    // By default docker uses TLS, so we need to point it to where our certificates are stored.
    certPath = new File(System.properties['user.home'] as String, '.docker/machine/certs/')
}


// Docker for the Database
// =======================

// The port on the host that maps to postgresql container's port
String PSQL_PORT_ON_HOST = '3141'

String DATABASE_CONTAINER_NAME = 'tododrop_database'

task createPostgresDockerfile(type: Dockerfile) {
    destFile = project.file('build/dockerfiles/postgres94/Dockerfile')
    from 'sameersbn/postgresql:9.4-12'
    environmentVariable('yolo', 'true')
}

task buildPostgresImage(type: DockerBuildImage) {
    dependsOn createPostgresDockerfile
    inputDir = createPostgresDockerfile.destFile.parentFile
    tag = 'tododrop/postgres94'
}

task createPostgresContainer(type: DockerCreateContainer) {
    dependsOn buildPostgresImage
    containerName = DATABASE_CONTAINER_NAME
    targetImageId { buildPostgresImage.getImageId() }
    portBindings = ["$PSQL_PORT_ON_HOST:5432"]
}

task startPostgresContainer(type: DockerStartContainer) {
    dependsOn createPostgresContainer
    targetContainerId { createPostgresContainer.getContainerId() }
}

task stopPostgresContainer(type: DockerStopContainer) {
    targetContainerId { createPostgresContainer.getContainerId() }
}

// Docker for the Java Application
// ===============================

String APP_JAR = "libs/tododrop-$version-all.jar"

task createJavaAppDockerfile(type: Dockerfile) {
    dependsOn shadowJar
    destFile = file("$buildDir/javaApp.Dockerfile")
    from 'java:8'
    addFile('tododrop.yml', 'tododrop.yml')
    addFile(APP_JAR, APP_JAR)
    environmentVariable("JDBC_DATABASE_URL", "")
//    runCommand("java -jar tododrop-$version-all.jar server tododrop.yml")
}

task buildJavaAppImage(type: DockerBuildImage) {
    dependsOn createJavaAppDockerfile
    dockerFile = file("$buildDir/javaApp.Dockerfile")
    inputDir = createJavaAppDockerfile.destFile.parentFile
    tag = 'tododrop:app'

    // We have to copy all files that we add to the docker container so that they are visible
    // to the Dockerfile.  Dockerfiles don't allow files outside of the immediate containing folder.
    // See https://github.com/docker/docker/issues/2745 for history.  It's a wontfix bug due to
    // security concerns.
    doFirst {
        copy {
            from file('tododrop.yml')
            into "$buildDir"
        }
    }
}

String APP_CONTAINER_NAME = 'tododrop_app'

task inspectJavaAppImage(type: DockerInspectImage) {
    dependsOn buildJavaAppImage
    targetImageId { buildJavaAppImage.getImageId() }
}

task createJavaAppContainer(type: DockerCreateContainer) {
    dependsOn inspectJavaAppImage
    containerName APP_CONTAINER_NAME
    links = [DATABASE_CONTAINER_NAME]
    cmd = ["java -jar "]
//    hostName
//    portSpecs
//    user
//    stdinOpen
//    stdinOnce
//    memoryLimit
//    memorySwap
//    cpuset
//    portBindings
//    publishAll
//    attachStdin
//    attachStdout
//    attachStderr
//    env
//    cmd
//    image
//    exposedPorts
//    logConfig
    targetImageId { buildJavaAppImage.getImageId() }
}

task startJavaAppContainer(type: DockerStartContainer) {
    dependsOn createJavaAppContainer
    mustRunAfter startPostgresContainer
    targetContainerId { createJavaAppContainer.getContainerId() }
}



check.dependsOn integrationTest
integrationTest.mustRunAfter test

// Always run integration tests
project.integrationTest {
    outputs.upToDateWhen { false }
}

// Ensure each type of test gets a separate directory
tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}

shadowJar {
    mergeServiceFiles()
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'
}

jar {
    manifest {
        attributes 'Main-Class': mainClassName
    }
}


// Stage - task for Heroku
// =======================
//
// Heroku runs the task stage for gradle builds.  We don't run tests on stage,
// because integration tests will wipe the database.
task stage(type: Task) {
    description "Task for Heroku to build the JAR.  Doesn't run any tests."
    dependsOn shadowJar
}

run {
    systemProperty "dropwizard.config", "tododrop.yml"
}

artifacts {
    archives shadowJar
}